{"version":3,"file":"index-TJWlWZ24.js","sources":["../../node_modules/ccount/index.js","../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../../node_modules/mdast-util-gfm-footnote/lib/index.js","../../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../../node_modules/markdown-table/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../../node_modules/mdast-util-to-markdown/lib/handle/break.js","../../node_modules/longest-streak/index.js","../../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../../node_modules/mdast-util-to-markdown/lib/handle/code.js","../../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../../node_modules/mdast-util-to-markdown/lib/handle/html.js","../../node_modules/mdast-util-to-markdown/lib/handle/image.js","../../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../../node_modules/mdast-util-to-markdown/lib/handle/link.js","../../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../../node_modules/mdast-util-to-markdown/lib/handle/list.js","../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../../node_modules/mdast-util-phrasing/lib/index.js","../../node_modules/mdast-util-to-markdown/lib/handle/root.js","../../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../../node_modules/mdast-util-to-markdown/lib/handle/text.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../../node_modules/mdast-util-to-markdown/lib/handle/index.js","../../node_modules/mdast-util-gfm-table/lib/index.js","../../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../../node_modules/mdast-util-gfm/lib/index.js","../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../../node_modules/micromark-extension-gfm-table/lib/infer.js","../../node_modules/micromark-extension-gfm-table/lib/syntax.js","../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../../node_modules/micromark-extension-gfm/index.js","../../node_modules/remark-gfm/lib/index.js","../../node_modules/stringify-entities/lib/core.js","../../node_modules/stringify-entities/lib/util/to-hexadecimal.js","../../node_modules/stringify-entities/lib/util/to-decimal.js","../../node_modules/character-entities-legacy/index.js","../../node_modules/character-entities-html4/index.js","../../node_modules/stringify-entities/lib/constant/dangerous.js","../../node_modules/stringify-entities/lib/util/to-named.js","../../node_modules/stringify-entities/lib/util/format-smart.js","../../node_modules/stringify-entities/lib/index.js","../../node_modules/hast-util-to-html/lib/handle/comment.js","../../node_modules/hast-util-to-html/lib/handle/doctype.js","../../node_modules/hast-util-to-html/lib/omission/util/siblings.js","../../node_modules/hast-util-to-html/lib/omission/omission.js","../../node_modules/hast-util-to-html/lib/omission/closing.js","../../node_modules/hast-util-to-html/lib/omission/opening.js","../../node_modules/hast-util-to-html/lib/handle/element.js","../../node_modules/hast-util-to-html/lib/handle/text.js","../../node_modules/hast-util-to-html/lib/handle/raw.js","../../node_modules/hast-util-to-html/lib/handle/root.js","../../node_modules/hast-util-to-html/lib/handle/index.js","../../node_modules/hast-util-to-html/lib/index.js","../../node_modules/rehype-stringify/lib/index.js","../../src/components/Preview/index.tsx"],"sourcesContent":["/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is PhrasingContent} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      'link',\n      'linkReference',\n      'strong',\n      'text'\n    ])\n  )\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  }\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (default: `true`).\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0]\n    })\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(\n        events.slice(this.map[index][0] + this.map[index][1]),\n        this.map[index][2]\n      )\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/// <reference types=\"remark-parse\" />\n/// <reference types=\"remark-stringify\" />\n\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-gfm').Options} MdastOptions\n * @typedef {import('micromark-extension-gfm').Options} MicromarkOptions\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {MicromarkOptions & MdastOptions} Options\n *   Configuration.\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef CoreOptions\n * @property {Array<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(\n    options.subset ? charactersToExpression(options.subset) : /[\"&'<>`]/g,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(\n        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n        /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g,\n        basic\n      )\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * @param {Array<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n","/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !/[\\dA-Fa-f]/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n","/**\n * Configurable ways to encode characters as decimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toDecimal(code, next, omit) {\n  const value = '&#' + String(code)\n  return omit && next && !/\\d/.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n","/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nexport const characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n]\n","/**\n * Map of named character references from HTML 4.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntitiesHtml4 = {\n  nbsp: ' ',\n  iexcl: '¡',\n  cent: '¢',\n  pound: '£',\n  curren: '¤',\n  yen: '¥',\n  brvbar: '¦',\n  sect: '§',\n  uml: '¨',\n  copy: '©',\n  ordf: 'ª',\n  laquo: '«',\n  not: '¬',\n  shy: '­',\n  reg: '®',\n  macr: '¯',\n  deg: '°',\n  plusmn: '±',\n  sup2: '²',\n  sup3: '³',\n  acute: '´',\n  micro: 'µ',\n  para: '¶',\n  middot: '·',\n  cedil: '¸',\n  sup1: '¹',\n  ordm: 'º',\n  raquo: '»',\n  frac14: '¼',\n  frac12: '½',\n  frac34: '¾',\n  iquest: '¿',\n  Agrave: 'À',\n  Aacute: 'Á',\n  Acirc: 'Â',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Aring: 'Å',\n  AElig: 'Æ',\n  Ccedil: 'Ç',\n  Egrave: 'È',\n  Eacute: 'É',\n  Ecirc: 'Ê',\n  Euml: 'Ë',\n  Igrave: 'Ì',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Iuml: 'Ï',\n  ETH: 'Ð',\n  Ntilde: 'Ñ',\n  Ograve: 'Ò',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Otilde: 'Õ',\n  Ouml: 'Ö',\n  times: '×',\n  Oslash: 'Ø',\n  Ugrave: 'Ù',\n  Uacute: 'Ú',\n  Ucirc: 'Û',\n  Uuml: 'Ü',\n  Yacute: 'Ý',\n  THORN: 'Þ',\n  szlig: 'ß',\n  agrave: 'à',\n  aacute: 'á',\n  acirc: 'â',\n  atilde: 'ã',\n  auml: 'ä',\n  aring: 'å',\n  aelig: 'æ',\n  ccedil: 'ç',\n  egrave: 'è',\n  eacute: 'é',\n  ecirc: 'ê',\n  euml: 'ë',\n  igrave: 'ì',\n  iacute: 'í',\n  icirc: 'î',\n  iuml: 'ï',\n  eth: 'ð',\n  ntilde: 'ñ',\n  ograve: 'ò',\n  oacute: 'ó',\n  ocirc: 'ô',\n  otilde: 'õ',\n  ouml: 'ö',\n  divide: '÷',\n  oslash: 'ø',\n  ugrave: 'ù',\n  uacute: 'ú',\n  ucirc: 'û',\n  uuml: 'ü',\n  yacute: 'ý',\n  thorn: 'þ',\n  yuml: 'ÿ',\n  fnof: 'ƒ',\n  Alpha: 'Α',\n  Beta: 'Β',\n  Gamma: 'Γ',\n  Delta: 'Δ',\n  Epsilon: 'Ε',\n  Zeta: 'Ζ',\n  Eta: 'Η',\n  Theta: 'Θ',\n  Iota: 'Ι',\n  Kappa: 'Κ',\n  Lambda: 'Λ',\n  Mu: 'Μ',\n  Nu: 'Ν',\n  Xi: 'Ξ',\n  Omicron: 'Ο',\n  Pi: 'Π',\n  Rho: 'Ρ',\n  Sigma: 'Σ',\n  Tau: 'Τ',\n  Upsilon: 'Υ',\n  Phi: 'Φ',\n  Chi: 'Χ',\n  Psi: 'Ψ',\n  Omega: 'Ω',\n  alpha: 'α',\n  beta: 'β',\n  gamma: 'γ',\n  delta: 'δ',\n  epsilon: 'ε',\n  zeta: 'ζ',\n  eta: 'η',\n  theta: 'θ',\n  iota: 'ι',\n  kappa: 'κ',\n  lambda: 'λ',\n  mu: 'μ',\n  nu: 'ν',\n  xi: 'ξ',\n  omicron: 'ο',\n  pi: 'π',\n  rho: 'ρ',\n  sigmaf: 'ς',\n  sigma: 'σ',\n  tau: 'τ',\n  upsilon: 'υ',\n  phi: 'φ',\n  chi: 'χ',\n  psi: 'ψ',\n  omega: 'ω',\n  thetasym: 'ϑ',\n  upsih: 'ϒ',\n  piv: 'ϖ',\n  bull: '•',\n  hellip: '…',\n  prime: '′',\n  Prime: '″',\n  oline: '‾',\n  frasl: '⁄',\n  weierp: '℘',\n  image: 'ℑ',\n  real: 'ℜ',\n  trade: '™',\n  alefsym: 'ℵ',\n  larr: '←',\n  uarr: '↑',\n  rarr: '→',\n  darr: '↓',\n  harr: '↔',\n  crarr: '↵',\n  lArr: '⇐',\n  uArr: '⇑',\n  rArr: '⇒',\n  dArr: '⇓',\n  hArr: '⇔',\n  forall: '∀',\n  part: '∂',\n  exist: '∃',\n  empty: '∅',\n  nabla: '∇',\n  isin: '∈',\n  notin: '∉',\n  ni: '∋',\n  prod: '∏',\n  sum: '∑',\n  minus: '−',\n  lowast: '∗',\n  radic: '√',\n  prop: '∝',\n  infin: '∞',\n  ang: '∠',\n  and: '∧',\n  or: '∨',\n  cap: '∩',\n  cup: '∪',\n  int: '∫',\n  there4: '∴',\n  sim: '∼',\n  cong: '≅',\n  asymp: '≈',\n  ne: '≠',\n  equiv: '≡',\n  le: '≤',\n  ge: '≥',\n  sub: '⊂',\n  sup: '⊃',\n  nsub: '⊄',\n  sube: '⊆',\n  supe: '⊇',\n  oplus: '⊕',\n  otimes: '⊗',\n  perp: '⊥',\n  sdot: '⋅',\n  lceil: '⌈',\n  rceil: '⌉',\n  lfloor: '⌊',\n  rfloor: '⌋',\n  lang: '〈',\n  rang: '〉',\n  loz: '◊',\n  spades: '♠',\n  clubs: '♣',\n  hearts: '♥',\n  diams: '♦',\n  quot: '\"',\n  amp: '&',\n  lt: '<',\n  gt: '>',\n  OElig: 'Œ',\n  oelig: 'œ',\n  Scaron: 'Š',\n  scaron: 'š',\n  Yuml: 'Ÿ',\n  circ: 'ˆ',\n  tilde: '˜',\n  ensp: ' ',\n  emsp: ' ',\n  thinsp: ' ',\n  zwnj: '‌',\n  zwj: '‍',\n  lrm: '‎',\n  rlm: '‏',\n  ndash: '–',\n  mdash: '—',\n  lsquo: '‘',\n  rsquo: '’',\n  sbquo: '‚',\n  ldquo: '“',\n  rdquo: '”',\n  bdquo: '„',\n  dagger: '†',\n  Dagger: '‡',\n  permil: '‰',\n  lsaquo: '‹',\n  rsaquo: '›',\n  euro: '€'\n}\n","/**\n * List of legacy (that don’t need a trailing `;`) named references which could,\n * depending on what follows them, turn into a different meaning\n *\n * @type {Array<string>}\n */\nexport const dangerous = [\n  'cent',\n  'copy',\n  'divide',\n  'gt',\n  'lt',\n  'not',\n  'para',\n  'times'\n]\n","import {characterEntitiesLegacy} from 'character-entities-legacy'\nimport {characterEntitiesHtml4} from 'character-entities-html4'\nimport {dangerous} from '../constant/dangerous.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Record<string, string>}\n */\nconst characters = {}\n\n/** @type {string} */\nlet key\n\nfor (key in characterEntitiesHtml4) {\n  if (own.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key\n  }\n}\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nexport function toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code)\n\n  if (own.call(characters, character)) {\n    const name = characters[character]\n    const value = '&' + name\n\n    if (\n      omit &&\n      characterEntitiesLegacy.includes(name) &&\n      !dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          /[^\\da-z]/i.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n","/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\nimport {toHexadecimal} from './to-hexadecimal.js'\nimport {toDecimal} from './to-decimal.js'\nimport {toNamed} from './to-named.js'\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nexport function formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons)\n  /** @type {string|undefined} */\n  let named\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    )\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons)\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n","/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\nimport {core} from './core.js'\nimport {formatSmart} from './util/format-smart.js'\nimport {formatBasic} from './util/format-basic.js'\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * Encode special characters in `value` as hexadecimals.\n *\n * @param {string} value\n *   Value to encode.\n * @param {LightOptions} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntitiesLight(value, options) {\n  return core(value, Object.assign({format: formatBasic}, options))\n}\n","/**\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('../index.js').State} State\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * Serialize a comment.\n *\n * @param {Comment} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function comment(node, _1, _2, state) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return state.settings.bogusComments\n    ? '<?' +\n        stringifyEntities(\n          node.value,\n          Object.assign({}, state.settings.characterReferences, {subset: ['>']})\n        ) +\n        '>'\n    : '<!--' + node.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return stringifyEntities(\n      $0,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: ['<', '>']\n      })\n    )\n  }\n}\n","/**\n * @typedef {import('hast').Doctype} Doctype\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('../index.js').State} State\n */\n\n// Make VS code see references to the above types.\n''\n\n/**\n * Serialize a doctype.\n *\n * @param {Doctype} _1\n *   Node to handle.\n * @param {number | undefined} _2\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _3\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function doctype(_1, _2, _3, state) {\n  return (\n    '<!' +\n    (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +\n    (state.settings.tightDoctype ? '' : ' ') +\n    'html>'\n  )\n}\n","/**\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').RootContent} RootContent\n */\n\nimport {whitespace} from 'hast-util-whitespace'\n\nexport const siblingAfter = siblings(1)\nexport const siblingBefore = siblings(-1)\n\n/** @type {Array<RootContent>} */\nconst emptyChildren = []\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @template {Parents} Parent\n   *   Parent type.\n   * @param {Parent | undefined} parent\n   *   Parent.\n   * @param {number | undefined} index\n   *   Index of child in `parent`.\n   * @param {boolean | undefined} [includeWhitespace=false]\n   *   Whether to include whitespace (default: `false`).\n   * @returns {Parent extends {children: Array<infer Child>} ? Child | undefined : never}\n   *   Child of parent.\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : emptyChildren\n    let offset = (index || 0) + increment\n    let next = siblings[offset]\n\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment\n        next = siblings[offset]\n      }\n    }\n\n    // @ts-expect-error: it’s a correct child.\n    return next\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\n/**\n * @callback OmitHandle\n *   Check if a tag can be omitted.\n * @param {Element} element\n *   Element to check.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether to omit a tag.\n *\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Record<string, OmitHandle>} handlers\n *   Omission handlers, where each key is a tag name, and each value is the\n *   corresponding handler.\n * @returns {OmitHandle}\n *   Whether to omit a tag of an element.\n */\nexport function omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingAfter} from './util/siblings.js'\nimport {omission} from './omission.js'\n\nexport const closing = omission({\n  body,\n  caption: headOrColgroupOrCaption,\n  colgroup: headOrColgroupOrCaption,\n  dd,\n  dt,\n  head: headOrColgroupOrCaption,\n  html,\n  li,\n  optgroup,\n  option,\n  p,\n  rp: rubyElement,\n  rt: rubyElement,\n  tbody,\n  td: cells,\n  tfoot,\n  th: cells,\n  thead,\n  tr\n})\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true)\n  return (\n    !next ||\n    (next.type !== 'comment' &&\n      !(next.type === 'text' && whitespace(next.value.charAt(0))))\n  )\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return next\n    ? next.type === 'element' &&\n        (next.tagName === 'address' ||\n          next.tagName === 'article' ||\n          next.tagName === 'aside' ||\n          next.tagName === 'blockquote' ||\n          next.tagName === 'details' ||\n          next.tagName === 'div' ||\n          next.tagName === 'dl' ||\n          next.tagName === 'fieldset' ||\n          next.tagName === 'figcaption' ||\n          next.tagName === 'figure' ||\n          next.tagName === 'footer' ||\n          next.tagName === 'form' ||\n          next.tagName === 'h1' ||\n          next.tagName === 'h2' ||\n          next.tagName === 'h3' ||\n          next.tagName === 'h4' ||\n          next.tagName === 'h5' ||\n          next.tagName === 'h6' ||\n          next.tagName === 'header' ||\n          next.tagName === 'hgroup' ||\n          next.tagName === 'hr' ||\n          next.tagName === 'main' ||\n          next.tagName === 'menu' ||\n          next.tagName === 'nav' ||\n          next.tagName === 'ol' ||\n          next.tagName === 'p' ||\n          next.tagName === 'pre' ||\n          next.tagName === 'section' ||\n          next.tagName === 'table' ||\n          next.tagName === 'ul')\n    : !parent ||\n        // Confusing parent.\n        !(\n          parent.type === 'element' &&\n          (parent.tagName === 'a' ||\n            parent.tagName === 'audio' ||\n            parent.tagName === 'del' ||\n            parent.tagName === 'ins' ||\n            parent.tagName === 'map' ||\n            parent.tagName === 'noscript' ||\n            parent.tagName === 'video')\n        )\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd')\n  )\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd'))\n  )\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'rp' || next.tagName === 'rt'))\n  )\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'option' || next.tagName === 'optgroup'))\n  )\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot')\n  )\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot'))\n  )\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'td' || next.tagName === 'th'))\n  )\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingAfter, siblingBefore} from './util/siblings.js'\nimport {closing} from './closing.js'\nimport {omission} from './omission.js'\n\nexport const opening = omission({\n  body,\n  colgroup,\n  head,\n  html,\n  tbody\n})\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1)\n  return !head || head.type !== 'comment'\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  const children = node.children\n  /** @type {Array<string>} */\n  const seen = []\n  let index = -1\n\n  while (++index < children.length) {\n    const child = children[index]\n    if (\n      child.type === 'element' &&\n      (child.tagName === 'title' || child.tagName === 'base')\n    ) {\n      if (seen.includes(child.tagName)) return false\n      seen.push(child.tagName)\n    }\n  }\n\n  return children.length > 0\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true)\n\n  return (\n    !head ||\n    (head.type !== 'comment' &&\n      !(head.type === 'text' && whitespace(head.value.charAt(0))) &&\n      !(\n        head.type === 'element' &&\n        (head.tagName === 'meta' ||\n          head.tagName === 'link' ||\n          head.tagName === 'script' ||\n          head.tagName === 'style' ||\n          head.tagName === 'template')\n      ))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1, true)\n\n  // Previous colgroup was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    previous.tagName === 'colgroup' &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'col')\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1)\n\n  // Previous table section was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'tr')\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Properties} Properties\n *\n * @typedef {import('../index.js').State} State\n */\n\nimport {ccount} from 'ccount'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {find, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringifyEntities} from 'stringify-entities'\nimport {closing} from '../omission/closing.js'\nimport {opening} from '../omission/opening.js'\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'double' | 'name' | 'single' | 'unquoted', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n}\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function element(node, index, parent, state) {\n  const schema = state.schema\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase())\n  /** @type {Array<string>} */\n  const parts = []\n  /** @type {string} */\n  let last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg\n  }\n\n  const attrs = serializeAttributes(state, node.properties)\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  state.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  // Note: `menuitem` has since been removed from the HTML spec, and so is no\n  // longer void.\n  if (content) selfClosing = false\n\n  if (attrs || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '')\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attrs.charAt(attrs.length - 1)\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} props\n * @returns {string}\n */\nfunction serializeAttributes(state, props) {\n  /** @type {Array<string>} */\n  const values = []\n  let index = -1\n  /** @type {string} */\n  let key\n\n  if (props) {\n    for (key in props) {\n      if (props[key] !== null && props[key] !== undefined) {\n        const value = serializeAttribute(state, key, props[key])\n        if (value) values.push(value)\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : undefined\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {Properties[keyof Properties]} value\n * @returns {string}\n */\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key)\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1\n  const y = state.settings.allowDangerousCharacters ? 0 : 1\n  let quote = state.quote\n  /** @type {string | undefined} */\n  let result\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === null ||\n    value === undefined ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? commas : spaces)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value)\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        attribute: true,\n        subset: constants.unquoted[x][y]\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      ccount(value, quote) > ccount(value, state.alternative)\n    ) {\n      quote = state.alternative\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n","/**\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-to-hast').Raw} Raw\n *\n * @typedef {import('../index.js').State} State\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * Serialize a text node.\n *\n * @param {Raw | Text} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: ['<', '&']\n        })\n      )\n}\n","/**\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('mdast-util-to-hast').Raw} Raw\n *\n * @typedef {import('../index.js').State} State\n */\n\nimport {text} from './text.js'\n\n/**\n * Serialize a raw node.\n *\n * @param {Raw} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function raw(node, index, parent, state) {\n  return state.settings.allowDangerousHtml\n    ? node.value\n    : text(node, index, parent, state)\n}\n","/**\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('../index.js').State} State\n */\n\n// Make VS code see references to the above types.\n''\n\n/**\n * Serialize a root.\n *\n * @param {Root} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function root(node, _1, _2, state) {\n  return state.all(node)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n *\n * @typedef {import('../index.js').State} State\n */\n\nimport {zwitch} from 'zwitch'\nimport {comment} from './comment.js'\nimport {doctype} from './doctype.js'\nimport {element} from './element.js'\nimport {raw} from './raw.js'\nimport {root} from './root.js'\nimport {text} from './text.js'\n\n/**\n * @type {(node: Nodes, index: number | undefined, parent: Parents | undefined, state: State) => string}\n */\nexport const handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {comment, doctype, element, raw, root, text}\n})\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node_\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node_) {\n  // `type` is guaranteed by runtime JS.\n  const node = /** @type {Nodes} */ (node_)\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('stringify-entities').Options} StringifyEntitiesOptions\n */\n\n/**\n * @typedef {Omit<StringifyEntitiesOptions, 'attribute' | 'escapeOnly' | 'subset'>} CharacterReferences\n *\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [allowDangerousCharacters=false]\n *   Do not encode some characters which cause XSS vulnerabilities in older\n *   browsers (default: `false`).\n *\n *   > ⚠️ **Danger**: only set this if you completely trust the content.\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Allow `raw` nodes and insert them as raw HTML (default: `false`).\n *\n *   When `false`, `Raw` nodes are encoded.\n *\n *   > ⚠️ **Danger**: only set this if you completely trust the content.\n * @property {boolean | null | undefined} [allowParseErrors=false]\n *   Do not encode characters which cause parse errors (even though they work),\n *   to save bytes (default: `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [bogusComments=false]\n *   Use “bogus comments” instead of comments to save byes: `<?charlie>`\n *   instead of `<!--charlie-->` (default: `false`).\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {CharacterReferences | null | undefined} [characterReferences]\n *   Configure how to serialize character references (optional).\n * @property {boolean | null | undefined} [closeEmptyElements=false]\n *   Close SVG elements without any content with slash (`/`) on the opening tag\n *   instead of an end tag: `<circle />` instead of `<circle></circle>`\n *   (default: `false`).\n *\n *   See `tightSelfClosing` to control whether a space is used before the\n *   slash.\n *\n *   Not used in the HTML space.\n * @property {boolean | null | undefined} [closeSelfClosing=false]\n *   Close self-closing nodes with an extra slash (`/`): `<img />` instead of\n *   `<img>` (default: `false`).\n *\n *   See `tightSelfClosing` to control whether a space is used before the\n *   slash.\n *\n *   Not used in the SVG space.\n * @property {boolean | null | undefined} [collapseEmptyAttributes=false]\n *   Collapse empty attributes: get `class` instead of `class=\"\"` (default:\n *   `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: boolean attributes (such as `hidden`) are always collapsed.\n * @property {boolean | null | undefined} [omitOptionalTags=false]\n *   Omit optional opening and closing tags (default: `false`).\n *\n *   For example, in `<ol><li>one</li><li>two</li></ol>`, both `</li>` closing\n *   tags can be omitted.\n *   The first because it’s followed by another `li`, the last because it’s\n *   followed by nothing.\n *\n *   Not used in the SVG space.\n * @property {boolean | null | undefined} [preferUnquoted=false]\n *   Leave attributes unquoted if that results in less bytes (default: `false`).\n *\n *   Not used in the SVG space.\n * @property {Quote | null | undefined} [quote='\"']\n *   Preferred quote to use (default: `'\"'`).\n * @property {boolean | null | undefined} [quoteSmart=false]\n *   Use the other quote if that results in less bytes (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it (default: `'html'`).\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use [`xast`][xast] if you need to support SVG as XML.\n * @property {boolean | null | undefined} [tightAttributes=false]\n *   Join attributes together, without whitespace, if possible: get\n *   `class=\"a b\"title=\"c d\"` instead of `class=\"a b\" title=\"c d\"` to save\n *   bytes (default: `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [tightCommaSeparatedLists=false]\n *   Join known comma-separated attribute values with just a comma (`,`),\n *   instead of padding them on the right as well (`,␠`, where `␠` represents a\n *   space) (default: `false`).\n * @property {boolean | null | undefined} [tightDoctype=false]\n *   Drop unneeded spaces in doctypes: `<!doctypehtml>` instead of\n *   `<!doctype html>` to save bytes (default: `false`).\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [tightSelfClosing=false]\n *   Do not use an extra space when closing self-closing elements: `<img/>`\n *   instead of `<img />` (default: `false`).\n *\n *   > 👉 **Note**: only used if `closeSelfClosing: true` or\n *   > `closeEmptyElements: true`.\n * @property {boolean | null | undefined} [upperDoctype=false]\n *   Use a `<!DOCTYPE…` instead of `<!doctype…` (default: `false`).\n *\n *   Useless except for XHTML.\n * @property {ReadonlyArray<string> | null | undefined} [voids]\n *   Tag names of elements to serialize without closing tag (default: `html-void-elements`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: It’s highly unlikely that you want to pass this, because\n *   > hast is not for XML, and HTML will not add more void elements.\n *\n * @typedef {'\"' | \"'\"} Quote\n *   HTML quotes for attribute values.\n *\n * @typedef {Omit<Required<{[key in keyof Options]: Exclude<Options[key], null | undefined>}>, 'space' | 'quote'>} Settings\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n * @typedef State\n *   Info passed around about the current state.\n * @property {(node: Nodes, index: number | undefined, parent: Parents | undefined) => string} one\n *   Serialize one node.\n * @property {(node: Parents | undefined) => string} all\n *   Serialize the children of a parent node.\n * @property {Settings} settings\n *   User configuration.\n * @property {Schema} schema\n *   Current schema.\n * @property {Quote} quote\n *   Preferred quote.\n * @property {Quote} alternative\n *   Alternative quote.\n */\n\nimport {htmlVoidElements} from 'html-void-elements'\nimport {html, svg} from 'property-information'\nimport {handle} from './handle/index.js'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/** @type {CharacterReferences} */\nconst emptyCharacterReferences = {}\n\n/** @type {Array<never>} */\nconst emptyChildren = []\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Array<RootContent> | Nodes} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized HTML.\n */\nexport function toHtml(tree, options) {\n  const options_ = options || emptyOptions\n  const quote = options_.quote || '\"'\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {State} */\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || htmlVoidElements,\n      characterReferences:\n        options_.characterReferences || emptyCharacterReferences,\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? svg : html,\n    quote,\n    alternative\n  }\n\n  return state.one(\n    Array.isArray(tree) ? {type: 'root', children: tree} : tree,\n    undefined,\n    undefined\n  )\n}\n\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node, index, parent) {\n  return handle(node, index, parent, this)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parents | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\nexport function all(parent) {\n  /** @type {Array<string>} */\n  const results = []\n  const children = (parent && parent.children) || emptyChildren\n  let index = -1\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent)\n  }\n\n  return results.join('')\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-to-html').Options} Options\n * @typedef {import('unified').Compiler<Root, string>} Compiler\n */\n\nimport {toHtml} from 'hast-util-to-html'\n\n/**\n * Plugin to add support for serializing as HTML.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function rehypeStringify(options) {\n  /** @type {import('unified').Processor<undefined, undefined, undefined, Root, string>} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n  const settings = {...self.data('settings'), ...options}\n\n  self.compiler = compiler\n\n  /**\n   * @type {Compiler}\n   */\n  function compiler(tree) {\n    return toHtml(tree, settings)\n  }\n}\n","import { useContext } from \"react\";\n\nimport ReactMarkdown from \"react-markdown\";\nimport remarkParse from \"remark-parse\";\nimport remarkGfm from \"remark-gfm\";\nimport remarkRehype from \"remark-rehype\";\nimport rehypeRaw from \"rehype-raw\"; // Crucial for HTML tag preservation\nimport rehypeStringify from \"rehype-stringify\";\nimport emoji from \"remark-emoji\";\n\n\nimport \"components/Preview/styles.css\";\nimport { MarkdownContext, ThemeContext } from \"context\";\n\nconst Preview = () => {\n    const themeContext = useContext(ThemeContext);\n    const {markdown, wordCount, charCount } = useContext(MarkdownContext)!;\n\n    if (!themeContext) return <div>Error: Theme context is null</div>;\n    const { theme } = themeContext;\n\n    return (\n        <>\n            <div className={`preview-info ${theme}`}>\n                <div className={`word-count ${theme}`}>\n                    {wordCount} words\n                </div>\n                <div className={`char-count ${theme}`}>\n                    {charCount} characters\n                </div>\n            </div>\n            <div className={`preview-content ${theme}`}>\n                <ReactMarkdown\n                    rehypePlugins={[\n                        rehypeRaw,\n                        rehypeStringify,\n                    ]}\n                    remarkPlugins={[\n                        remarkParse,\n                        remarkGfm,\n                        remarkRehype,\n                        emoji,\n                    ]}\n                >\n                    {markdown}\n                </ReactMarkdown>\n            </div>\n        </>\n    );\n};\n\nexport default Preview;\n"],"names":["ccount","value","character","source","count","index","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transformGfmAutolinkLiterals","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolink","exitLiteralAutolinkEmail","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","gfmAutolinkLiteralToMarkdown","token","node","assert","tree","findAndReplace","findUrl","findEmail","_","protocol","domain","path","match","prefix","previous","isCorrectDomain","parts","splitUrl","result","atext","label","url","trailExec","trail","closingParenIndex","openingParens","closingParens","email","code","unicodeWhitespace","unicodePunctuation","footnoteReference","footnoteReferencePeek","gfmFootnoteFromMarkdown","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","enterFootnoteCall","enterFootnoteCallString","exitFootnoteDefinition","exitFootnoteDefinitionLabelString","exitFootnoteCall","exitFootnoteCallString","gfmFootnoteToMarkdown","footnoteDefinition","normalizeIdentifier","state","info","tracker","exit","subexit","map","line","blank","constructsWithoutStrikethrough","handleDelete","peekDelete","gfmStrikethroughFromMarkdown","enterStrikethrough","exitStrikethrough","gfmStrikethroughToMarkdown","markdownTable","table","options","align","stringLength","defaultStringLength","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","cell","serialize","size","toAlignment","before","after","lines","blockquote","patternInScope","stack","pattern","listInScope","list","none","hardBreak","_1","longestStreak","substring","expected","max","formatCodeAsIndented","checkFence","marker","raw","suffix","sequence","checkQuote","definition","quote","checkEmphasis","emphasis","emphasisPeek","formatHeadingAsSetext","literalWithBreak","visit","EXIT","toString","heading","rank","html","htmlPeek","image","imagePeek","imageReference","imageReferencePeek","type","alt","reference","inlineCode","inlineCodePeek","expression","position","formatLinkAsAutolink","link","linkPeek","linkReference","linkReferencePeek","text","checkBullet","checkBulletOther","bullet","bulletOther","checkBulletOrdered","checkRule","parent","bulletCurrent","useDifferentMarker","firstListItem","item","checkListItemIndent","style","listItem","listItemIndent","paragraph","phrasing","convert","root","d","checkStrong","strong","strongPeek","checkRuleRepetition","repetition","thematicBreak","handle","gfmTableFromMarkdown","enterTable","enterCell","enterRow","exitCodeText","exitTable","replace","$0","$1","gfmTableToMarkdown","settings","padding","alignDelimiters","around","inlineCodeWithTable","handleTable","handleTableCell","handleTableRow","serializeData","handleTableAsData","handleTableRowAsData","matrix","children","defaultHandlers","gfmTaskListItemFromMarkdown","exitCheck","exitParagraphWithTaskListItem","gfmTaskListItemToMarkdown","listItemWithTaskListItem","head","siblings","firstParaghraph","sibling","checkable","checkbox","check","gfmFromMarkdown","gfmToMarkdown","wwwPrefix","tokenizeWwwPrefix","tokenizeDomain","tokenizePath","tokenizeTrail","emailDomainDotTrail","tokenizeEmailDomainDotTrail","wwwAutolink","tokenizeWwwAutolink","previousWww","protocolAutolink","tokenizeProtocolAutolink","previousProtocol","emailAutolink","tokenizeEmailAutolink","previousEmail","gfmAutolinkLiteral","effects","ok","nok","self","dot","data","start","gfmAtext","previousUnbalanced","emailDomain","emailDomainAfter","emailDomainDot","asciiAlphanumeric","asciiAlpha","wwwStart","wwwAfter","buffer","seen","protocolStart","protocolPrefixInside","protocolSlashesInside","afterProtocol","asciiControl","markdownLineEndingOrSpace","protocolAfter","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","events","indent","tokenizeIndent","gfmFootnote","tokenizeDefinitionStart","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","tokenizeGfmFootnoteCall","tokenizePotentialGfmFootnoteCall","resolveToPotentialGfmFootnoteCall","defined","labelStart","id","context","call","string","chunk","replacement","callStart","callData","callEscape","identifier","labelAtMarker","labelInside","labelAfter","labelEscape","factorySpace","whitespaceAfter","blankLine","afterPrefix","tail","gfmStrikethrough","single","tokenizer","tokenizeStrikethrough","resolveAllStrikethrough","open","strikethrough","nextEvents","insideSpan","splice","resolveAll","more","classifyCharacter","EditMap","remove","add","addImpl","b","vecs","slice","editMap","at","gfmTableAlign","inDelimiterRow","event","alignIndex","gfmTable","tokenizeTable","resolveTable","sizeB","next","bodyRowStart","headRowBefore","headRowStart","headRowBreak","markdownLineEnding","headDelimiterStart","markdownSpace","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","currentTable","currentBody","currentCell","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","valueName","getPoint","now","relatedStart","relatedEnd","valueToken","end","a","tableBody","exits","related","side","tasklistCheck","tokenizeTasklistCheck","gfmTaskListItem","inside","close","spaceThenNonSpace","gfm","combineExtensions","emptyOptions","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","core","charactersToExpression","basic","surrogate","pair","all","subset","groups","toHexadecimal","omit","toDecimal","characterEntitiesLegacy","characterEntitiesHtml4","dangerous","own","characters","key","toNamed","attribute","name","formatSmart","numeric","named","decimal","stringifyEntities","comment","_2","encode","doctype","_3","siblingAfter","siblingBefore","emptyChildren","increment","includeWhitespace","offset","whitespace","omission","handlers","closing","body","headOrColgroupOrCaption","dd","dt","li","optgroup","option","p","rubyElement","tbody","cells","tfoot","thead","tr","opening","colgroup","child","constants","element","schema","selfClosing","last","svg","attrs","serializeAttributes","content","props","values","serializeAttribute","find","x","y","commas","spaces","zwitch","invalid","unknown","node_","emptyCharacterReferences","toHtml","options_","alternative","one","htmlVoidElements","results","rehypeStringify","compiler","Preview","themeContext","useContext","ThemeContext","markdown","wordCount","charCount","MarkdownContext","jsx","theme","jsxs","Fragment","ReactMarkdown","rehypeRaw","remarkParse","remarkRehype","emoji"],"mappings":"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AAU,WAAW,CAAC,EACtB0Y,EAAI,WAAWvY,EAAQ,CAAC,EACxByE,CACD,CACF,CACH,CAMA,SAAS0T,GAAuBK,EAAQ,CAEtC,MAAMC,EAAS,CAAE,EACjB,IAAIzY,EAAQ,GAEZ,KAAO,EAAEA,EAAQwY,EAAO,QACtBC,EAAO,KAAKD,EAAOxY,CAAK,EAAE,QAAQ,sBAAuB,MAAM,CAAC,EAGlE,OAAO,IAAI,OAAO,MAAQyY,EAAO,KAAK,GAAG,EAAI,IAAK,GAAG,CACvD,CCjFO,SAASC,GAAcnW,EAAM+R,EAAMqE,EAAM,CAC9C,MAAM/Y,EAAQ,MAAQ2C,EAAK,SAAS,EAAE,EAAE,YAAa,EACrD,OAAOoW,GAAQrE,GAAQ,CAAC,aAAa,KAAK,OAAO,aAAaA,CAAI,CAAC,EAC/D1U,EACAA,EAAQ,GACd,CCLO,SAASgZ,GAAUrW,EAAM+R,EAAMqE,EAAM,CAC1C,MAAM/Y,EAAQ,KAAO,OAAO2C,CAAI,EAChC,OAAOoW,GAAQrE,GAAQ,CAAC,KAAK,KAAK,OAAO,aAAaA,CAAI,CAAC,EACvD1U,EACAA,EAAQ,GACd,CCRO,MAAMiZ,GAA0B,CACrC,QACA,MACA,SACA,QACA,SACA,QACA,SACA,OACA,OACA,SACA,MACA,SACA,QACA,SACA,OACA,KACA,SACA,QACA,SACA,OACA,KACA,SACA,SACA,QACA,SACA,SACA,SACA,OACA,OACA,MACA,QACA,SACA,QACA,SACA,OACA,SACA,SACA,QACA,QACA,QACA,SACA,MACA,QACA,SACA,OACA,SACA,SACA,QACA,OACA,OACA,SACA,MACA,SACA,SACA,QACA,SACA,MACA,OACA,SACA,SACA,SACA,KACA,SACA,QACA,QACA,SACA,SACA,OACA,QACA,KACA,OACA,QACA,SACA,OACA,MACA,SACA,SACA,QACA,SACA,OACA,OACA,SACA,SACA,OACA,OACA,SACA,QACA,OACA,QACA,MACA,OACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,QACA,SACA,MACA,OACA,SACA,MACA,MACF,EC3GaC,EAAyB,CACpC,KAAM,IACN,MAAO,IACP,KAAM,IACN,MAAO,IACP,OAAQ,IACR,IAAK,IACL,OAAQ,IACR,KAAM,IACN,IAAK,IACL,KAAM,IACN,KAAM,IACN,MAAO,IACP,IAAK,IACL,IAAK,IACL,IAAK,IACL,KAAM,IACN,IAAK,IACL,OAAQ,IACR,KAAM,IACN,KAAM,IACN,MAAO,IACP,MAAO,IACP,KAAM,IACN,OAAQ,IACR,MAAO,IACP,KAAM,IACN,KAAM,IACN,MAAO,IACP,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,MAAO,IACP,OAAQ,IACR,KAAM,IACN,MAAO,IACP,MAAO,IACP,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,MAAO,IACP,KAAM,IACN,OAAQ,IACR,OAAQ,IACR,MAAO,IACP,KAAM,IACN,IAAK,IACL,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,MAAO,IACP,OAAQ,IACR,KAAM,IACN,MAAO,IACP,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,MAAO,IACP,KAAM,IACN,OAAQ,IACR,MAAO,IACP,MAAO,IACP,OAAQ,IACR,OAAQ,IACR,MAAO,IACP,OAAQ,IACR,KAAM,IACN,MAAO,IACP,MAAO,IACP,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,MAAO,IACP,KAAM,IACN,OAAQ,IACR,OAAQ,IACR,MAAO,IACP,KAAM,IACN,IAAK,IACL,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,MAAO,IACP,OAAQ,IACR,KAAM,IACN,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,MAAO,IACP,KAAM,IACN,OAAQ,IACR,MAAO,IACP,KAAM,IACN,KAAM,IACN,MAAO,IACP,KAAM,IACN,MAAO,IACP,MAAO,IACP,QAAS,IACT,KAAM,IACN,IAAK,IACL,MAAO,IACP,KAAM,IACN,MAAO,IACP,OAAQ,IACR,GAAI,IACJ,GAAI,IACJ,GAAI,IACJ,QAAS,IACT,GAAI,IACJ,IAAK,IACL,MAAO,IACP,IAAK,IACL,QAAS,IACT,IAAK,IACL,IAAK,IACL,IAAK,IACL,MAAO,IACP,MAAO,IACP,KAAM,IACN,MAAO,IACP,MAAO,IACP,QAAS,IACT,KAAM,IACN,IAAK,IACL,MAAO,IACP,KAAM,IACN,MAAO,IACP,OAAQ,IACR,GAAI,IACJ,GAAI,IACJ,GAAI,IACJ,QAAS,IACT,GAAI,IACJ,IAAK,IACL,OAAQ,IACR,MAAO,IACP,IAAK,IACL,QAAS,IACT,IAAK,IACL,IAAK,IACL,IAAK,IACL,MAAO,IACP,SAAU,IACV,MAAO,IACP,IAAK,IACL,KAAM,IACN,OAAQ,IACR,MAAO,IACP,MAAO,IACP,MAAO,IACP,MAAO,IACP,OAAQ,IACR,MAAO,IACP,KAAM,IACN,MAAO,IACP,QAAS,IACT,KAAM,IACN,KAAM,IACN,KAAM,IACN,KAAM,IACN,KAAM,IACN,MAAO,IACP,KAAM,IACN,KAAM,IACN,KAAM,IACN,KAAM,IACN,KAAM,IACN,OAAQ,IACR,KAAM,IACN,MAAO,IACP,MAAO,IACP,MAAO,IACP,KAAM,IACN,MAAO,IACP,GAAI,IACJ,KAAM,IACN,IAAK,IACL,MAAO,IACP,OAAQ,IACR,MAAO,IACP,KAAM,IACN,MAAO,IACP,IAAK,IACL,IAAK,IACL,GAAI,IACJ,IAAK,IACL,IAAK,IACL,IAAK,IACL,OAAQ,IACR,IAAK,IACL,KAAM,IACN,MAAO,IACP,GAAI,IACJ,MAAO,IACP,GAAI,IACJ,GAAI,IACJ,IAAK,IACL,IAAK,IACL,KAAM,IACN,KAAM,IACN,KAAM,IACN,MAAO,IACP,OAAQ,IACR,KAAM,IACN,KAAM,IACN,MAAO,IACP,MAAO,IACP,OAAQ,IACR,OAAQ,IACR,KAAM,IACN,KAAM,IACN,IAAK,IACL,OAAQ,IACR,MAAO,IACP,OAAQ,IACR,MAAO,IACP,KAAM,IACN,IAAK,IACL,GAAI,IACJ,GAAI,IACJ,MAAO,IACP,MAAO,IACP,OAAQ,IACR,OAAQ,IACR,KAAM,IACN,KAAM,IACN,MAAO,IACP,KAAM,IACN,KAAM,IACN,OAAQ,IACR,KAAM,IACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,MAAO,IACP,MAAO,IACP,MAAO,IACP,MAAO,IACP,MAAO,IACP,MAAO,IACP,MAAO,IACP,MAAO,IACP,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,KAAM,GACR,EC5PaC,GAAY,CACvB,OACA,OACA,SACA,KACA,KACA,MACA,OACA,OACF,ECXMC,GAAM,CAAE,EAAC,eAOTC,EAAa,CAAE,EAGrB,IAAIC,EAEJ,IAAKA,KAAOJ,EACNE,GAAI,KAAKF,EAAwBI,CAAG,IACtCD,EAAWH,EAAuBI,CAAG,CAAC,EAAIA,GAavC,SAASC,GAAQ5W,EAAM+R,EAAMqE,EAAMS,EAAW,CACnD,MAAMvZ,EAAY,OAAO,aAAa0C,CAAI,EAE1C,GAAIyW,GAAI,KAAKC,EAAYpZ,CAAS,EAAG,CACnC,MAAMwZ,EAAOJ,EAAWpZ,CAAS,EAC3BD,EAAQ,IAAMyZ,EAEpB,OACEV,GACAE,GAAwB,SAASQ,CAAI,GACrC,CAACN,GAAU,SAASM,CAAI,IACvB,CAACD,GACC9E,GACCA,IAAS,IACT,YAAY,KAAK,OAAO,aAAaA,CAAI,CAAC,GAEvC1U,EAGFA,EAAQ,GAChB,CAED,MAAO,EACT,CCzBO,SAAS0Z,GAAY/W,EAAM+R,EAAM7P,EAAS,CAC/C,IAAI8U,EAAUb,GAAcnW,EAAM+R,EAAM7P,EAAQ,sBAAsB,EAElE+U,EAqBJ,IAnBI/U,EAAQ,oBAAsBA,EAAQ,yBACxC+U,EAAQL,GACN5W,EACA+R,EACA7P,EAAQ,uBACRA,EAAQ,SACT,IAcAA,EAAQ,uBAAyB,CAAC+U,IACnC/U,EAAQ,sBACR,CACA,MAAMgV,EAAUb,GAAUrW,EAAM+R,EAAM7P,EAAQ,sBAAsB,EAEhEgV,EAAQ,OAASF,EAAQ,SAC3BA,EAAUE,EAEb,CAED,OAAOD,IACJ,CAAC/U,EAAQ,uBAAyB+U,EAAM,OAASD,EAAQ,QACxDC,EACAD,CACN,CCjDO,SAASG,EAAkB9Z,EAAO6E,EAAS,CAChD,OAAOyT,GAAKtY,EAAO,OAAO,OAAO,CAAC,OAAQ0Z,EAAW,EAAG7U,CAAO,CAAC,CAClE,CCEO,SAASkV,GAAQ9Y,EAAMwF,EAAIuT,EAAIpW,EAAO,CAE3C,OAAOA,EAAM,SAAS,cAClB,KACEkW,EACE7Y,EAAK,MACL,OAAO,OAAO,CAAE,EAAE2C,EAAM,SAAS,oBAAqB,CAAC,OAAQ,CAAC,GAAG,CAAC,CAAC,CACtE,EACD,IACF,OAAS3C,EAAK,MAAM,QAAQ,6BAA8BgZ,CAAM,EAAI,MAKxE,SAASA,EAAO3O,EAAI,CAClB,OAAOwO,EACLxO,EACA,OAAO,OAAO,CAAA,EAAI1H,EAAM,SAAS,oBAAqB,CACpD,OAAQ,CAAC,IAAK,GAAG,CACzB,CAAO,CACF,CACF,CACH,CCrBO,SAASsW,GAAQzT,EAAIuT,EAAIG,EAAIvW,EAAO,CACzC,MACE,MACCA,EAAM,SAAS,aAAe,UAAY,YAC1CA,EAAM,SAAS,aAAe,GAAK,KACpC,OAEJ,CCxBO,MAAMwW,EAAevN,GAAS,CAAC,EACzBwN,GAAgBxN,GAAS,EAAE,EAGlCyN,GAAgB,CAAE,EAOxB,SAASzN,GAAS0N,EAAW,CAC3B,OAAOxN,EAgBP,SAASA,EAAQrD,EAAQtJ,EAAOoa,EAAmB,CACjD,MAAM3N,EAAWnD,EAASA,EAAO,SAAW4Q,GAC5C,IAAIG,GAAUra,GAAS,GAAKma,EACxB7F,EAAO7H,EAAS4N,CAAM,EAE1B,GAAI,CAACD,EACH,KAAO9F,GAAQgG,GAAWhG,CAAI,GAC5B+F,GAAUF,EACV7F,EAAO7H,EAAS4N,CAAM,EAK1B,OAAO/F,CACR,CACH,CC/BA,MAAM0E,GAAM,CAAE,EAAC,eAWR,SAASuB,GAASC,EAAU,CACjC,OAAO7B,EAOP,SAASA,EAAK9X,EAAMb,EAAOsJ,EAAQ,CACjC,OACE0P,GAAI,KAAKwB,EAAU3Z,EAAK,OAAO,GAC/B2Z,EAAS3Z,EAAK,OAAO,EAAEA,EAAMb,EAAOsJ,CAAM,CAE7C,CACH,CCnCO,MAAMmR,GAAUF,GAAS,CAChC,KAAEG,GACA,QAASC,EACT,SAAUA,EACV,GAAAC,GACA,GAAAC,GACA,KAAMF,EACR,KAAE9S,GACA,GAAAiT,GACA,SAAAC,GACA,OAAAC,GACA,EAAAC,GACA,GAAIC,GACJ,GAAIA,GACN,MAAEC,GACA,GAAIC,GACJ,MAAAC,GACA,GAAID,GACJ,MAAAE,GACA,GAAAC,EACF,CAAC,EAcD,SAASZ,EAAwBxZ,EAAGnB,EAAOsJ,EAAQ,CACjD,MAAMgL,EAAO0F,EAAa1Q,EAAQtJ,EAAO,EAAI,EAC7C,MACE,CAACsU,GACAA,EAAK,OAAS,WACb,EAAEA,EAAK,OAAS,QAAUgG,GAAWhG,EAAK,MAAM,OAAO,CAAC,CAAC,EAE/D,CAcA,SAASzM,GAAK1G,EAAGnB,EAAOsJ,EAAQ,CAC9B,MAAMgL,EAAO0F,EAAa1Q,EAAQtJ,CAAK,EACvC,MAAO,CAACsU,GAAQA,EAAK,OAAS,SAChC,CAcA,SAASoG,GAAKvZ,EAAGnB,EAAOsJ,EAAQ,CAC9B,MAAMgL,EAAO0F,EAAa1Q,EAAQtJ,CAAK,EACvC,MAAO,CAACsU,GAAQA,EAAK,OAAS,SAChC,CAcA,SAAS2G,GAAE9Z,EAAGnB,EAAOsJ,EAAQ,CAC3B,MAAMgL,EAAO0F,EAAa1Q,EAAQtJ,CAAK,EACvC,OAAOsU,EACHA,EAAK,OAAS,YACXA,EAAK,UAAY,WAChBA,EAAK,UAAY,WACjBA,EAAK,UAAY,SACjBA,EAAK,UAAY,cACjBA,EAAK,UAAY,WACjBA,EAAK,UAAY,OACjBA,EAAK,UAAY,MACjBA,EAAK,UAAY,YACjBA,EAAK,UAAY,cACjBA,EAAK,UAAY,UACjBA,EAAK,UAAY,UACjBA,EAAK,UAAY,QACjBA,EAAK,UAAY,MACjBA,EAAK,UAAY,MACjBA,EAAK,UAAY,MACjBA,EAAK,UAAY,MACjBA,EAAK,UAAY,MACjBA,EAAK,UAAY,MACjBA,EAAK,UAAY,UACjBA,EAAK,UAAY,UACjBA,EAAK,UAAY,MACjBA,EAAK,UAAY,QACjBA,EAAK,UAAY,QACjBA,EAAK,UAAY,OACjBA,EAAK,UAAY,MACjBA,EAAK,UAAY,KACjBA,EAAK,UAAY,OACjBA,EAAK,UAAY,WACjBA,EAAK,UAAY,SACjBA,EAAK,UAAY,MACrB,CAAChL,GAEC,EACEA,EAAO,OAAS,YACfA,EAAO,UAAY,KAClBA,EAAO,UAAY,SACnBA,EAAO,UAAY,OACnBA,EAAO,UAAY,OACnBA,EAAO,UAAY,OACnBA,EAAO,UAAY,YACnBA,EAAO,UAAY,SAE/B,CAcA,SAASwR,GAAG3Z,EAAGnB,EAAOsJ,EAAQ,CAC5B,MAAMgL,EAAO0F,EAAa1Q,EAAQtJ,CAAK,EACvC,MAAO,CAACsU,GAASA,EAAK,OAAS,WAAaA,EAAK,UAAY,IAC/D,CAcA,SAASuG,GAAG1Z,EAAGnB,EAAOsJ,EAAQ,CAC5B,MAAMgL,EAAO0F,EAAa1Q,EAAQtJ,CAAK,EACvC,MAAO,GACLsU,GACEA,EAAK,OAAS,YACbA,EAAK,UAAY,MAAQA,EAAK,UAAY,MAEjD,CAcA,SAASsG,GAAGzZ,EAAGnB,EAAOsJ,EAAQ,CAC5B,MAAMgL,EAAO0F,EAAa1Q,EAAQtJ,CAAK,EACvC,MACE,CAACsU,GACAA,EAAK,OAAS,YACZA,EAAK,UAAY,MAAQA,EAAK,UAAY,KAEjD,CAcA,SAAS4G,GAAY/Z,EAAGnB,EAAOsJ,EAAQ,CACrC,MAAMgL,EAAO0F,EAAa1Q,EAAQtJ,CAAK,EACvC,MACE,CAACsU,GACAA,EAAK,OAAS,YACZA,EAAK,UAAY,MAAQA,EAAK,UAAY,KAEjD,CAcA,SAASyG,GAAS5Z,EAAGnB,EAAOsJ,EAAQ,CAClC,MAAMgL,EAAO0F,EAAa1Q,EAAQtJ,CAAK,EACvC,MAAO,CAACsU,GAASA,EAAK,OAAS,WAAaA,EAAK,UAAY,UAC/D,CAcA,SAAS0G,GAAO7Z,EAAGnB,EAAOsJ,EAAQ,CAChC,MAAMgL,EAAO0F,EAAa1Q,EAAQtJ,CAAK,EACvC,MACE,CAACsU,GACAA,EAAK,OAAS,YACZA,EAAK,UAAY,UAAYA,EAAK,UAAY,WAErD,CAcA,SAASgH,GAAMna,EAAGnB,EAAOsJ,EAAQ,CAC/B,MAAMgL,EAAO0F,EAAa1Q,EAAQtJ,CAAK,EACvC,MAAO,GACLsU,GACEA,EAAK,OAAS,YACbA,EAAK,UAAY,SAAWA,EAAK,UAAY,SAEpD,CAcA,SAAS6G,GAAMha,EAAGnB,EAAOsJ,EAAQ,CAC/B,MAAMgL,EAAO0F,EAAa1Q,EAAQtJ,CAAK,EACvC,MACE,CAACsU,GACAA,EAAK,OAAS,YACZA,EAAK,UAAY,SAAWA,EAAK,UAAY,QAEpD,CAcA,SAAS+G,GAAMla,EAAGnB,EAAOsJ,EAAQ,CAC/B,MAAO,CAAC0Q,EAAa1Q,EAAQtJ,CAAK,CACpC,CAcA,SAASub,GAAGpa,EAAGnB,EAAOsJ,EAAQ,CAC5B,MAAMgL,EAAO0F,EAAa1Q,EAAQtJ,CAAK,EACvC,MAAO,CAACsU,GAASA,EAAK,OAAS,WAAaA,EAAK,UAAY,IAC/D,CAcA,SAAS8G,GAAMja,EAAGnB,EAAOsJ,EAAQ,CAC/B,MAAMgL,EAAO0F,EAAa1Q,EAAQtJ,CAAK,EACvC,MACE,CAACsU,GACAA,EAAK,OAAS,YACZA,EAAK,UAAY,MAAQA,EAAK,UAAY,KAEjD,CC5VO,MAAMkH,GAAUjB,GAAS,CAC9B,KAAAG,GACA,SAAAe,GACA,KAAAjP,GACA,KAAA3E,GACA,MAAAsT,EACF,CAAC,EAUD,SAAStT,GAAKhH,EAAM,CAClB,MAAM2L,EAAOwN,EAAanZ,EAAM,EAAE,EAClC,MAAO,CAAC2L,GAAQA,EAAK,OAAS,SAChC,CAUA,SAASA,GAAK3L,EAAM,CAClB,MAAMoL,EAAWpL,EAAK,SAEhBsO,EAAO,CAAE,EACf,IAAInP,EAAQ,GAEZ,KAAO,EAAEA,EAAQiM,EAAS,QAAQ,CAChC,MAAMyP,EAAQzP,EAASjM,CAAK,EAC5B,GACE0b,EAAM,OAAS,YACdA,EAAM,UAAY,SAAWA,EAAM,UAAY,QAChD,CACA,GAAIvM,EAAK,SAASuM,EAAM,OAAO,EAAG,MAAO,GACzCvM,EAAK,KAAKuM,EAAM,OAAO,CACxB,CACF,CAED,OAAOzP,EAAS,OAAS,CAC3B,CAUA,SAASyO,GAAK7Z,EAAM,CAClB,MAAM2L,EAAOwN,EAAanZ,EAAM,GAAI,EAAI,EAExC,MACE,CAAC2L,GACAA,EAAK,OAAS,WACb,EAAEA,EAAK,OAAS,QAAU8N,GAAW9N,EAAK,MAAM,OAAO,CAAC,CAAC,IACzD,EACEA,EAAK,OAAS,YACbA,EAAK,UAAY,QAChBA,EAAK,UAAY,QACjBA,EAAK,UAAY,UACjBA,EAAK,UAAY,SACjBA,EAAK,UAAY,YAG3B,CAiBA,SAASiP,GAAS5a,EAAMb,EAAOsJ,EAAQ,CACrC,MAAM7H,EAAWwY,GAAc3Q,EAAQtJ,CAAK,EACtCwM,EAAOwN,EAAanZ,EAAM,GAAI,EAAI,EAGxC,OACEyI,GACA7H,GACAA,EAAS,OAAS,WAClBA,EAAS,UAAY,YACrBgZ,GAAQhZ,EAAU6H,EAAO,SAAS,QAAQ7H,CAAQ,EAAG6H,CAAM,EAEpD,GAGF,GAAQkD,GAAQA,EAAK,OAAS,WAAaA,EAAK,UAAY,MACrE,CAcA,SAAS2O,GAAMta,EAAMb,EAAOsJ,EAAQ,CAClC,MAAM7H,EAAWwY,GAAc3Q,EAAQtJ,CAAK,EACtCwM,EAAOwN,EAAanZ,EAAM,EAAE,EAGlC,OACEyI,GACA7H,GACAA,EAAS,OAAS,YACjBA,EAAS,UAAY,SAAWA,EAAS,UAAY,UACtDgZ,GAAQhZ,EAAU6H,EAAO,SAAS,QAAQ7H,CAAQ,EAAG6H,CAAM,EAEpD,GAGF,GAAQkD,GAAQA,EAAK,OAAS,WAAaA,EAAK,UAAY,KACrE,CCzHA,MAAMmP,EAAY,CAEhB,KAAM,CACJ,CAAC;AAAA,WAAgB,MAAM,EAAE,EAAG;AAAA,eAAoB,MAAM,EAAE,CAAC,EACzD,CAAC;AAAA,cAAsB,MAAM,EAAE,EAAG;AAAA,gBAAuB,MAAM,EAAE,CAAC,CACnE,EAED,SAAU,CACR,CAAC;AAAA,SAAc,MAAM,EAAE,EAAG;AAAA,eAAsB,MAAM,EAAE,CAAC,EACzD,CAAC;AAAA,eAAsB,MAAM,EAAE,EAAG;AAAA,eAAsB,MAAM,EAAE,CAAC,CAClE,EAED,OAAQ,CACN,CAAC,KAAK,MAAM,EAAE,EAAG,QAAQ,MAAM,EAAE,CAAC,EAClC,CAAC,OAAO,MAAM,EAAE,EAAG,UAAU,MAAM,EAAE,CAAC,CACvC,EAED,OAAQ,CACN,CAAC,KAAK,MAAM,EAAE,EAAG,QAAQ,MAAM,EAAE,CAAC,EAClC,CAAC,OAAO,MAAM,EAAE,EAAG,UAAU,MAAM,EAAE,CAAC,CACvC,CACH,EAgBO,SAASC,GAAQ/a,EAAMb,EAAOsJ,EAAQ9F,EAAO,CAClD,MAAMqY,EAASrY,EAAM,OACfmV,EAAOkD,EAAO,QAAU,MAAQ,GAAQrY,EAAM,SAAS,iBAC7D,IAAIsY,EACFD,EAAO,QAAU,MACbrY,EAAM,SAAS,mBACfA,EAAM,SAAS,MAAM,SAAS3C,EAAK,QAAQ,aAAa,EAE9D,MAAMc,EAAQ,CAAE,EAEhB,IAAIoa,EAEAF,EAAO,QAAU,QAAUhb,EAAK,UAAY,QAC9C2C,EAAM,OAASwY,IAGjB,MAAMC,EAAQC,GAAoB1Y,EAAO3C,EAAK,UAAU,EAElDsb,EAAU3Y,EAAM,IACpBqY,EAAO,QAAU,QAAUhb,EAAK,UAAY,WAAaA,EAAK,QAAUA,CACzE,EAED,OAAA2C,EAAM,OAASqY,EAQXM,IAASL,EAAc,KAEvBG,GAAS,CAACtD,GAAQ,CAAC6C,GAAQ3a,EAAMb,EAAOsJ,CAAM,KAChD3H,EAAM,KAAK,IAAKd,EAAK,QAASob,EAAQ,IAAMA,EAAQ,EAAE,EAGpDH,IACCD,EAAO,QAAU,OAASrY,EAAM,SAAS,oBAE1CuY,EAAOE,EAAM,OAAOA,EAAM,OAAS,CAAC,GAElC,CAACzY,EAAM,SAAS,kBAChBuY,IAAS,KACRA,GAAQA,IAAS,KAAOA,IAAS,MAElCpa,EAAM,KAAK,GAAG,EAGhBA,EAAM,KAAK,GAAG,GAGhBA,EAAM,KAAK,GAAG,GAGhBA,EAAM,KAAKwa,CAAO,EAEd,CAACL,IAAgB,CAACnD,GAAQ,CAAC8B,GAAQ5Z,EAAMb,EAAOsJ,CAAM,IACxD3H,EAAM,KAAK,KAAOd,EAAK,QAAU,GAAG,EAG/Bc,EAAM,KAAK,EAAE,CACtB,CAOA,SAASua,GAAoB1Y,EAAO4Y,EAAO,CAEzC,MAAMC,EAAS,CAAE,EACjB,IAAIrc,EAAQ,GAERkZ,EAEJ,GAAIkD,GACF,IAAKlD,KAAOkD,EACV,GAAIA,EAAMlD,CAAG,IAAM,MAAQkD,EAAMlD,CAAG,IAAM,OAAW,CACnD,MAAMtZ,EAAQ0c,GAAmB9Y,EAAO0V,EAAKkD,EAAMlD,CAAG,CAAC,EACnDtZ,GAAOyc,EAAO,KAAKzc,CAAK,CAC7B,EAIL,KAAO,EAAEI,EAAQqc,EAAO,QAAQ,CAC9B,MAAMN,EAAOvY,EAAM,SAAS,gBACxB6Y,EAAOrc,CAAK,EAAE,OAAOqc,EAAOrc,CAAK,EAAE,OAAS,CAAC,EAC7C,OAGAA,IAAUqc,EAAO,OAAS,GAAKN,IAAS,KAAOA,IAAS,MAC1DM,EAAOrc,CAAK,GAAK,IAEpB,CAED,OAAOqc,EAAO,KAAK,EAAE,CACvB,CAQA,SAASC,GAAmB9Y,EAAO0V,EAAKtZ,EAAO,CAC7C,MAAM6D,EAAO8Y,GAAK/Y,EAAM,OAAQ0V,CAAG,EAC7BsD,EACJhZ,EAAM,SAAS,kBAAoBA,EAAM,OAAO,QAAU,OAAS,EAAI,EACnEiZ,EAAIjZ,EAAM,SAAS,yBAA2B,EAAI,EACxD,IAAI0D,EAAQ1D,EAAM,MAEd3B,EAWJ,GATI4B,EAAK,oBAAsB7D,IAAU6D,EAAK,WAAa7D,IAAU,IACnEA,EAAQ,IAER6D,EAAK,SACJA,EAAK,mBAAqB,OAAO7D,GAAU,YAE5CA,EAAQ,EAAQA,GAIhBA,GAAU,MAEVA,IAAU,IACT,OAAOA,GAAU,UAAY,OAAO,MAAMA,CAAK,EAEhD,MAAO,GAGT,MAAMyZ,EAAOK,EACXjW,EAAK,UACL,OAAO,OAAO,CAAA,EAAID,EAAM,SAAS,oBAAqB,CAEpD,OAAQmY,EAAU,KAAKa,CAAC,EAAEC,CAAC,CACjC,CAAK,CACF,EA6BD,OAVI7c,IAAU,KAIdA,EAAQ,MAAM,QAAQA,CAAK,GACtB6D,EAAK,eAAiBiZ,GAASC,IAAQ/c,EAAO,CAC7C,QAAS,CAAC4D,EAAM,SAAS,wBACjC,CAAO,EACD,OAAO5D,CAAK,EAEZ4D,EAAM,SAAS,yBAA2B,CAAC5D,GAAcyZ,GAGzD7V,EAAM,SAAS,iBACjB3B,EAAS6X,EACP9Z,EACA,OAAO,OAAO,CAAA,EAAI4D,EAAM,SAAS,oBAAqB,CACpD,UAAW,GACX,OAAQmY,EAAU,SAASa,CAAC,EAAEC,CAAC,CACvC,CAAO,CACF,GAKC5a,IAAWjC,IAGX4D,EAAM,SAAS,YACf7D,EAAOC,EAAOsH,CAAK,EAAIvH,EAAOC,EAAO4D,EAAM,WAAW,IAEtD0D,EAAQ1D,EAAM,aAGhB3B,EACEqF,EACAwS,EACE9Z,EACA,OAAO,OAAO,CAAA,EAAI4D,EAAM,SAAS,oBAAqB,CAEpD,QAAS0D,IAAU,IAAMyU,EAAU,OAASA,EAAU,QAAQa,CAAC,EAAEC,CAAC,EAClE,UAAW,EACrB,CAAS,CACF,EACDvV,GAIGmS,GAAQxX,GAAS,IAAMA,GAChC,CClPO,SAASkH,GAAKlI,EAAMM,EAAGmI,EAAQ9F,EAAO,CAE3C,OAAO8F,GACLA,EAAO,OAAS,YACfA,EAAO,UAAY,UAAYA,EAAO,UAAY,SACjDzI,EAAK,MACL6Y,EACE7Y,EAAK,MACL,OAAO,OAAO,CAAA,EAAI2C,EAAM,SAAS,oBAAqB,CACpD,OAAQ,CAAC,IAAK,GAAG,CAC3B,CAAS,CACF,CACP,CCbO,SAASqD,GAAIhG,EAAMb,EAAOsJ,EAAQ9F,EAAO,CAC9C,OAAOA,EAAM,SAAS,mBAClB3C,EAAK,MACLkI,GAAKlI,EAAMb,EAAOsJ,EAAQ9F,CAAK,CACrC,CCJO,SAAS0G,GAAKrJ,EAAMwF,EAAIuT,EAAIpW,EAAO,CACxC,OAAOA,EAAM,IAAI3C,CAAI,CACvB,CCRO,MAAM6J,GAASkS,GAAO,OAAQ,CACnC,QAAAC,GACA,QAAAC,GACA,SAAU,CAAC,QAAAnD,GAAS,QAAAG,GAAS,QAAA8B,GAAS,IAAA/U,GAAK,KAAAqD,GAAM,KAAAnB,EAAI,CACvD,CAAC,EAUD,SAAS8T,GAAQhc,EAAM,CACrB,MAAM,IAAI,MAAM,uBAAyBA,EAAO,GAAG,CACrD,CAUA,SAASic,GAAQC,EAAO,CAEtB,MAAMlc,EAA6Bkc,EACnC,MAAM,IAAI,MAAM,gCAAkClc,EAAK,KAAO,GAAG,CACnE,CC+GA,MAAMgX,GAAe,CAAE,EAGjBmF,GAA2B,CAAE,EAG7B9C,GAAgB,CAAE,EAYjB,SAAS+C,GAAOlc,EAAM0D,EAAS,CACpC,MAAMyY,EAAWzY,GAAWoT,GACtB3Q,EAAQgW,EAAS,OAAS,IAC1BC,EAAcjW,IAAU,IAAM,IAAM,IAE1C,GAAIA,IAAU,KAAOA,IAAU,IAC7B,MAAM,IAAI,MAAM,kBAAoBA,EAAQ,yBAAyB,EAgCvE,MA5Bc,CACZ,IAAAkW,GACA,IAAA7E,GACA,SAAU,CACR,iBAAkB2E,EAAS,kBAAoB,GAC/C,iBAAkBA,EAAS,kBAAoB,GAC/C,yBAA0BA,EAAS,0BAA4B,GAC/D,WAAYA,EAAS,YAAc,GACnC,eAAgBA,EAAS,gBAAkB,GAC3C,gBAAiBA,EAAS,iBAAmB,GAC7C,aAAcA,EAAS,cAAgB,GACvC,aAAcA,EAAS,cAAgB,GACvC,cAAeA,EAAS,eAAiB,GACzC,yBAA0BA,EAAS,0BAA4B,GAC/D,iBAAkBA,EAAS,kBAAoB,GAC/C,wBAAyBA,EAAS,yBAA2B,GAC7D,mBAAoBA,EAAS,oBAAsB,GACnD,MAAOA,EAAS,OAASG,GACzB,oBACEH,EAAS,qBAAuBF,GAClC,iBAAkBE,EAAS,kBAAoB,GAC/C,mBAAoBA,EAAS,oBAAsB,EACpD,EACD,OAAQA,EAAS,QAAU,MAAQlB,GAAMnU,GACzC,MAAAX,EACA,YAAAiW,CACD,EAEY,IACX,MAAM,QAAQpc,CAAI,EAAI,CAAC,KAAM,OAAQ,SAAUA,CAAI,EAAIA,EACvD,OACA,MACD,CACH,CAgBA,SAASqc,GAAIvc,EAAMb,EAAOsJ,EAAQ,CAChC,OAAOoB,GAAO7J,EAAMb,EAAOsJ,EAAQ,IAAI,CACzC,CAWO,SAASiP,GAAIjP,EAAQ,CAE1B,MAAMgU,EAAU,CAAE,EACZrR,EAAY3C,GAAUA,EAAO,UAAa4Q,GAChD,IAAIla,EAAQ,GAEZ,KAAO,EAAEA,EAAQiM,EAAS,QACxBqR,EAAQtd,CAAK,EAAI,KAAK,IAAIiM,EAASjM,CAAK,EAAGA,EAAOsJ,CAAM,EAG1D,OAAOgU,EAAQ,KAAK,EAAE,CACxB,CCpPe,SAASC,GAAgB9Y,EAAS,CAG/C,MAAM4J,EAAO,KACPhD,EAAW,CAAC,GAAGgD,EAAK,KAAK,UAAU,EAAG,GAAG5J,CAAO,EAEtD4J,EAAK,SAAWmP,EAKhB,SAASA,EAASzc,EAAM,CACtB,OAAOkc,GAAOlc,EAAMsK,CAAQ,CAC7B,CACH,CChBA,MAAMoS,GAAU,IAAM,CACZ,MAAAC,EAAeC,cAAWC,EAAY,EACtC,CAAC,SAAAC,EAAU,UAAAC,EAAW,UAAAC,CAAU,EAAIJ,GAAAA,WAAWK,EAAe,EAEpE,GAAI,CAACN,EAAqB,OAAAO,EAAA,IAAC,OAAI,SAA4B,8BAAA,CAAA,EACrD,KAAA,CAAE,MAAAC,CAAU,EAAAR,EAElB,OAEQS,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAD,EAAA,KAAC,MAAI,CAAA,UAAW,gBAAgBD,CAAK,GACjC,SAAA,CAAAC,EAAA,KAAC,MAAI,CAAA,UAAW,cAAcD,CAAK,GAC9B,SAAA,CAAAJ,EAAU,QAAA,EACf,EACCK,EAAA,KAAA,MAAA,CAAI,UAAW,cAAcD,CAAK,GAC9B,SAAA,CAAAH,EAAU,aAAA,EACf,CAAA,EACJ,EACCE,MAAA,MAAA,CAAI,UAAW,mBAAmBC,CAAK,GACpC,SAAAD,EAAA,IAACI,GAAA,CACG,cAAe,CACXC,GACAf,EACJ,EACA,cAAe,CACXgB,GACAzG,GACA0G,GACAC,EACJ,EAEC,SAAAZ,CAAA,CAAA,EAET,CACJ,CAAA,CAAA,CAER","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74]}