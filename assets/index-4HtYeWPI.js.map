{"version":3,"file":"index-4HtYeWPI.js","sources":["../../src/components/EntryList/list.tsx","../../src/components/EntryList/index.tsx"],"sourcesContent":["import { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { ThemeContext } from \"context\";\nimport { EntryListContext, GroupedEntryType } from \"context/entrylist\";\nimport { getReadableTime, exportMarkdown } from \"utils\";\n\nconst List = ({\n    groupedEntries,\n    closeList,\n}: {\n    groupedEntries: GroupedEntryType[];\n    closeList: () => void;\n}) => {\n    const { theme } = useContext(ThemeContext)!;\n    const {\n        selectedEntries,\n        renamingEntries,\n        renameEntry,\n        handleEntrySelect,\n        openEntry,\n        deleteEntry,\n        startRenaming,\n        setNewName,\n    } = useContext(EntryListContext)!;\n\n    return groupedEntries.map(\n        (entry) =>\n            entry.entries.length > 0 && (\n                <div key={entry.entryName}>\n                    <div className={`entry-title ${theme}`}>\n                        {!renamingEntries[entry.entryName] ? (\n                            entry.entryName.length > 50 ? (\n                                entry.entryName.substring(0, 70) + \"...\"\n                            ) : (\n                                entry.entryName\n                            )\n                        ) : (\n                            <>\n                                <input\n                                    className={`entry-search ${theme}`}\n                                    type=\"text\"\n                                    placeholder={entry.entryName}\n                                    onChange={(e) => setNewName(e.target.value)}\n                                />\n                                <label\n                                    key=\"Rename Entry\"\n                                    className={`btn ${theme}`}\n                                    title=\"Rename\"\n                                    onClick={() => renameEntry(entry.entryName)}\n                                >\n                                    Rename\n                                </label>\n                            </>\n                        )}\n                    </div>\n                    <div\n                        title=\"Rename this entry\"\n                        className={`rename-btn ${theme}`}\n                        onClick={() => startRenaming(entry.entryName)}\n                    >\n                        &gt;\n                    </div>\n                    {entry.entries.map((entry) => (\n                        <div className=\"entry\" key={entry.timestamp.toString()}>\n                            <br />\n                            <label\n                                title=\"Check to preview\"\n                                className={`checkbox-container ${theme}`}\n                            >\n                                <input\n                                    type=\"checkbox\"\n                                    name=\"myCheckbox\"\n                                    checked={selectedEntries.includes(entry)}\n                                    onChange={() => handleEntrySelect(entry)}\n                                />\n                                <span\n                                    className={`checkbox-checkmark ${theme}`}\n                                ></span>\n                            </label>\n                            <button\n                                title={`${\n                                    entry.filename\n                                } from ${entry.timestamp.toDateString()}`}\n                                className={`entry-button ${theme}`}\n                                onClick={() => {\n                                    openEntry(entry);\n                                    closeList();\n                                }}\n                            >\n                                {getReadableTime(entry.timestamp)}{\" \"}\n                            </button>\n                            <Link\n                                title=\"Open entry in new tab\"\n                                to={\n                                    \"entry/\" +\n                                    entry.filename +\n                                    \"@\" +\n                                    getReadableTime(entry.timestamp)\n                                }\n                                target=\"_blank\"\n                            >\n                                <h3>[â†—]</h3>\n                            </Link>\n                            <button\n                                title={`Export as ${entry.filename}.md`}\n                                className={`export-button ${theme}`}\n                                onClick={() =>\n                                    exportMarkdown({\n                                        filename: entry.filename,\n                                        markdown: entry.markdown,\n                                    })\n                                }\n                            >\n                                Export\n                            </button>\n                            <button\n                                title={`Export as ${entry.filename}.md`}\n                                className={`export-button ${theme}`}\n                                onClick={() =>\n                                    exportMarkdown({\n                                        filename:\n                                            entry.filename +\n                                            \"@\" +\n                                            getReadableTime(entry.timestamp),\n                                        markdown: entry.markdown,\n                                    })\n                                }\n                            >\n                                @\n                            </button>\n                            <button\n                                title={`Delete this version of ${entry.filename}`}\n                                className=\"delete-button\"\n                                onClick={() => deleteEntry(entry)}\n                            >\n                                Delete\n                            </button>\n                        </div>\n                    ))}\n                </div>\n            )\n    );\n};\n\nexport default List;\n","import { useState, useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { EntryListContext, ThemeContext } from \"context\";\nimport { GroupedEntryType } from \"context/entrylist\";\nimport List from \"./list\";\n\nimport \"components/EntryList/styles.css\";\n\nconst EntryList = ({ closeList }: { closeList: () => void }) => {\n    const [matchingGroups, setMatchingGroups] = useState<GroupedEntryType[]>(\n        []\n    );\n    const [hideSearch, setHideSearch] = useState(true);\n    const [searchText, setSearchText] = useState(\"\");\n    const { theme } = useContext(ThemeContext)!;\n    const {\n        groupedEntries,\n        updateList,\n        exportEntries,\n        importEntries,\n        previewEntries,\n        openEntry,\n    } = useContext(EntryListContext)!;\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        updateList();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (searchText === \"\") return setMatchingGroups(groupedEntries);\n        const matches = groupedEntries.filter((group) =>\n            group.entryName.toLowerCase().includes(searchText.toLowerCase())\n        );\n        setMatchingGroups(matches);\n    }, [groupedEntries, searchText]);\n\n    return (\n        <div className={`entry-list ${theme}`}>\n            <h2 className={`entry-list-heading ${theme}`}>Saved Entries</h2>\n            <div className=\"header-button-container\">\n                <button\n                    key=\"New Entry\"\n                    className={`entry-button ${theme}`}\n                    title=\"Open a new entry in the editor\"\n                    onClick={() => {\n                        openEntry({\n                            filename: \"untitled\",\n                            markdown: \"\",\n                            timestamp: new Date(),\n                        });\n                        closeList();\n                    }}\n                >\n                    New Entry\n                </button>\n                <button\n                    key=\"Preview\"\n                    className={`entry-button ${theme}`}\n                    title=\"Mark two entries to open a preview\"\n                    onClick={() => {\n                        const p = previewEntries();\n                        p &&\n                            navigate(`/mdwrite/previews/p1/${p[0]}/p2/${p[1]}`);\n                    }}\n                >\n                    Preview\n                </button>\n            </div>\n            <div className=\"header-button-container\">\n                <label\n                    key=\"Import Entries\"\n                    className={`btn ${theme}`}\n                    title=\"Import entries into the browser\"\n                >\n                    <input type=\"file\" onChange={importEntries} />\n                    Import Entries\n                </label>\n                <label\n                    className={`btn ${theme}`}\n                    title={`Click to ${hideSearch ? \"reveal\" : \"hide\"} the search bar`}\n                    onClick={() => setHideSearch(!hideSearch)}\n                >\n                    Search\n                </label>\n                <label\n                    key=\"Export Entries\"\n                    className={`btn ${theme}`}\n                    title=\"Export entries into a file\"\n                    onClick={exportEntries}\n                >\n                    Export Entries\n                </label>\n            </div>\n\n            {!hideSearch && (\n                <>\n                    <input\n                        className={`entry-search ${theme}`}\n                        type=\"text\"\n                        placeholder=\"Search\"\n                        onChange={(e) => setSearchText(e.target.value)}\n                    />\n                    {matchingGroups.length === 0 ? (\n                        <h3 className={`search-heading ${theme}`}>\n                            No matches\n                        </h3>\n                    ) : (\n                        <List\n                            groupedEntries={matchingGroups}\n                            closeList={closeList}\n                        />\n                    )}\n                </>\n            )}\n\n            {hideSearch &&\n                (groupedEntries.length === 0 ? (\n                    <h3 className={`search-heading ${theme}`}>No entry</h3>\n                ) : (\n                    <List\n                        groupedEntries={groupedEntries}\n                        closeList={closeList}\n                    />\n                ))}\n        </div>\n    );\n};\n\nexport default EntryList;\n"],"names":["List","groupedEntries","closeList","theme","useContext","ThemeContext","selectedEntries","renamingEntries","renameEntry","handleEntrySelect","openEntry","deleteEntry","startRenaming","setNewName","EntryListContext","entry","jsx","jsxs","Fragment","e","getReadableTime","Link","exportMarkdown","EntryList","matchingGroups","setMatchingGroups","useState","hideSearch","setHideSearch","searchText","setSearchText","updateList","exportEntries","importEntries","previewEntries","navigate","useNavigate","useEffect","matches","group","p"],"mappings":"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"}