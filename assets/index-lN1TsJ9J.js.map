{"version":3,"file":"index-lN1TsJ9J.js","sources":["../../src/utils/getReadableTime.ts","../../src/components/EntryList/index.tsx"],"sourcesContent":["export const getReadableTime = (dateObject: Date) => {\n    const months = [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n    ];\n\n    const date = dateObject.getDate();\n    const month = months[dateObject.getMonth()];\n    const year = dateObject.getFullYear();\n\n    const formattedDate = `${date} ${month}, ${year}`;\n\n    const hours = dateObject.getHours();\n    const minutes = dateObject.getMinutes();\n    const meridian = hours >= 12 ? \"PM\" : \"AM\";\n\n    const formattedTime = `${hours % 12 || 12}:${minutes\n        .toString()\n        .padStart(2, \"0\")} ${meridian}`; // Example output: \"9:01 AM\"\n\n    return `${formattedTime} - ${formattedDate}`;\n};\n","import { MarkdownContext } from \"context/markdown\";\nimport { useState, useEffect, useContext } from \"react\";\n\nimport { ThemeContext } from \"context/theme\";\nimport { exportMarkdown } from \"utils/exportMarkdown\";\nimport { getReadableTime } from \"utils/getReadableTime\";\n\nimport \"components/EntryList/styles.css\";\n\ninterface Entry {\n    filename: string;\n    markdown: string;\n    timestamp: Date;\n}\n\ninterface GroupedEntry {\n    entryName: string;\n    entries: Entry[];\n}\n\nconst EntryList = ({ closeList }: { closeList: () => void }) => {\n    const [groupedEntries, setGroupedEntries] = useState<GroupedEntry[]>([]);\n    const { handleChange, filenameChange, timestampChange } = useContext(MarkdownContext)!;\n    const { theme } = useContext(ThemeContext)!;\n\n    useEffect(() => {\n        const storedEntries = Object.entries(localStorage)\n            .filter(([key]) => key.startsWith(\"Entry: \"))\n            .map(([key, value]: [key: string, value: string]) => ({\n                filename: key.replace(\"Entry: \", \"\").split(\" - \")[0],\n                markdown: value,\n                timestamp: new Date(key.replace(\"Entry: \", \"\").split(\" - \")[1]),\n            }));\n\n        const groupedEntries = Object.values(\n            storedEntries.reduce((acc, { filename, markdown, timestamp }) => {\n                if (!acc[filename]) acc[filename] = [];\n                acc[filename].push({ filename, markdown, timestamp });\n                return acc;\n            }, {} as Record<string, Entry[]>)\n        ).map((entries) => {\n            entries.sort(\n                (a, b) => b.timestamp.getTime() - a.timestamp.getTime()\n            );\n            return {\n                entryName: entries[0].filename,\n                entries,\n            };\n        });\n\n        groupedEntries.sort(\n            (a, b) =>\n                b.entries[0].timestamp.getTime() -\n                a.entries[0].timestamp.getTime()\n        );\n\n        setGroupedEntries(groupedEntries);\n    }, [closeList]);\n\n    const openEntry = (entry: Entry) => {\n        filenameChange(entry.filename);\n        handleChange(entry.markdown);\n        timestampChange(entry.timestamp);\n        closeList();\n    };\n\n    const deleteEntry = (target: Entry) => {\n        const { timeZone } = Intl.DateTimeFormat().resolvedOptions();\n        const formattedDate = target.timestamp.toLocaleString(\"en-US\", {\n            timeZone,\n        });\n        localStorage.removeItem(`Entry: ${target.filename} - ${formattedDate}`);\n\n        const newEntries = groupedEntries.map((entry) => {\n            if (entry.entryName === target.filename) {\n                return {\n                    ...entry,\n                    entries: entry.entries.filter(\n                        (detail) => detail.timestamp !== target.timestamp\n                    ),\n                };\n            }\n            return entry;\n        });\n\n        setGroupedEntries(newEntries);\n    };\n\n    return (\n        <div className={`entry-list ${theme}`}>\n            <h2 className={`entry-list-heading ${theme}`}>Saved Entries</h2>\n            <button\n                key=\"New Entry\"\n                className={`entry-button ${theme}`}\n                onClick={() =>\n                    openEntry({\n                        filename: \"untitled\",\n                        markdown: \"\",\n                        timestamp: new Date(),\n                    })\n                }\n            >\n                New Entry\n            </button>\n            {groupedEntries.length == 0 ? (\n                <div className={`entry-title ${theme}`}>No entry</div>\n            ) : (\n                groupedEntries.map((entry) => entry.entries.length > 0 && (\n                    <div key={entry.entryName}>\n                        <div className={`entry-title ${theme}`}>\n                            {entry.entryName.length > 50\n                                ? entry.entryName.substring(0, 70) + \"...\"\n                                : entry.entryName}\n                        </div>\n                        {entry.entries.map((entry) => (\n                            <div\n                                className=\"entry\"\n                                key={entry.timestamp.toString()}\n                            >\n                                <br />\n                                <button\n                                    className={`entry-button ${theme}`}\n                                    onClick={() => openEntry(entry)}\n                                >\n                                    {getReadableTime(entry.timestamp)}\n                                </button>\n                                <button\n                                    className={`export-button ${theme}`}\n                                    onClick={() =>\n                                        exportMarkdown({\n                                            filename: entry.filename,\n                                            markdown: entry.markdown,\n                                        })\n                                    }\n                                >\n                                    Export\n                                </button>\n                                <button\n                                    className=\"delete-button\"\n                                    onClick={() => deleteEntry(entry)}\n                                >\n                                    Delete\n                                </button>\n                            </div>\n                        ))}\n                    </div>\n                ))\n            )}\n        </div>\n    );\n};\n\nexport default EntryList;\n"],"names":["getReadableTime","dateObject","months","date","month","year","formattedDate","hours","minutes","meridian","EntryList","closeList","groupedEntries","setGroupedEntries","useState","handleChange","filenameChange","timestampChange","useContext","MarkdownContext","theme","ThemeContext","useEffect","storedEntries","key","value","acc","filename","markdown","timestamp","entries","a","b","openEntry","entry","deleteEntry","target","timeZone","newEntries","detail","jsxs","jsx","exportMarkdown"],"mappings":"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"}