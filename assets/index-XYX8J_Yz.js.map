{"version":3,"mappings":"oJAGA,MAAMA,EAAOC,EAAA,KAAK,IAAMC,EAAA,WAAO,qBAAiB,EAAC,iCAK3CC,EAAQ,IAAM,CACV,MAAE,UAAAC,GAAcC,IAChB,CAAE,aAAAC,EAAc,eAAAC,EAAgB,gBAAAC,CAAgB,EAClDC,aAAWC,CAAe,EAE9BC,mBAAU,IAAM,CACN,MAAAC,EAAgB,OAAO,QAAQ,YAAY,EAC5C,OAAO,CAAC,CAACC,CAAG,IAAM,CACf,MAAMC,EAAWD,EAAI,MAAM,QAAQ,EAAE,CAAC,EAChCE,EAAeC,EACjB,IAAI,KAAKH,EAAI,QAAQ,UAAW,EAAE,EAAE,MAAM,QAAQ,EAAE,CAAC,CAAC,GAOnD,OALcC,EAAW,IAAMC,GACN,WAC5B,UAAUX,CAAS,GAI1B,GACA,IAAI,CAAC,CAACS,EAAKI,CAAK,KAAqC,CAClD,SAAUJ,EAAI,QAAQ,UAAW,EAAE,EAAE,MAAM,QAAQ,EAAE,CAAC,EACtD,SAAUI,EACV,UAAW,IAAI,KACXJ,EAAI,QAAQ,UAAW,EAAE,EAAE,MAAM,QAAQ,EAAE,CAAC,CAChD,CACF,IAEQD,EAAA,KACV,CAACM,EAAGC,IAAMA,EAAE,UAAU,UAAYD,EAAE,UAAU,QAAQ,GAG1D,MAAME,EACFR,EAAc,OAAS,EACjBA,EAAc,CAAC,EACf,CACI,SAAUR,GAAa,WACvB,SAAU,GACV,cAAe,IAAK,EAGlCG,EAAea,EAAM,QAAQ,EAC7Bd,EAAac,EAAM,SAAUA,EAAM,UAAWA,EAAM,QAAQ,EAC5DZ,EAAgBY,EAAM,SAAS,GAEhC,CAAChB,CAAS,CAAC,EAGViB,MAACC,WAAS,UAAWD,EAAA,IAAAE,EAAA,CAAQ,GACzB,SAACF,MAAArB,EAAA,CAAK,YAAa,GAAM,CAC7B,EAER","names":["Main","lazy","__vitePreload","Entry","entryName","useParams","handleChange","filenameChange","timestampChange","useContext","MarkdownContext","useEffect","storedEntries","key","entryKey","readableTime","getReadableTime","value","a","b","entry","jsx","Suspense","Loading"],"sources":["../../src/components/Entry/index.tsx"],"sourcesContent":["import { Suspense, lazy, useContext, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst Main = lazy(() => import(\"components/Main\"));\nimport { MarkdownContext } from \"context\";\nimport { getReadableTime } from \"utils\";\nimport { Loading } from \"components\";\n\nconst Entry = () => {\n    const { entryName } = useParams();\n    const { handleChange, filenameChange, timestampChange } =\n        useContext(MarkdownContext)!;\n\n    useEffect(() => {\n        const storedEntries = Object.entries(localStorage)\n            .filter(([key]) => {\n                const entryKey = key.split(\" :~~: \")[0];\n                const readableTime = getReadableTime(\n                    new Date(key.replace(\"Entry: \", \"\").split(\" :~~: \")[1])\n                );\n                const formattedKey = entryKey + \"@\" + readableTime;\n                const matchedKey = formattedKey.startsWith(\n                    `Entry: ${entryName}`\n                );\n\n                return matchedKey;\n            })\n            .map(([key, value]: [key: string, value: string]) => ({\n                filename: key.replace(\"Entry: \", \"\").split(\" :~~: \")[0],\n                markdown: value,\n                timestamp: new Date(\n                    key.replace(\"Entry: \", \"\").split(\" :~~: \")[1]\n                ),\n            }));\n\n        storedEntries.sort(\n            (a, b) => b.timestamp.getTime() - a.timestamp.getTime()\n        );\n\n        const entry =\n            storedEntries.length > 0\n                ? storedEntries[0]\n                : {\n                      filename: entryName ?? \"untitled\",\n                      markdown: \"\",\n                      timestamp: new Date(),\n                  };\n\n        filenameChange(entry.filename);\n        handleChange(entry.markdown, entry.timestamp, entry.filename);\n        timestampChange(entry.timestamp);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [entryName]);\n\n    return (\n        <Suspense fallback={<Loading />}>\n            <Main toCloseList={true} />\n        </Suspense>\n    );\n};\n\nexport default Entry;\n"],"file":"assets/index-XYX8J_Yz.js"}