{"version":3,"file":"index-S_USuxYC.js","sources":["../../src/components/SplitPreviews/index.tsx"],"sourcesContent":["import { useContext, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nimport ReactMarkdown from \"react-markdown\";\nimport remarkParse from \"remark-parse\";\nimport remarkGfm from \"remark-gfm\";\nimport remarkRehype from \"remark-rehype\";\nimport rehypeRaw from \"rehype-raw\"; // Crucial for HTML tag preservation\nimport rehypeStringify from \"rehype-stringify\";\nimport emoji from \"remark-emoji\";\n\nimport { MarkdownContext, SecondPreviewContext, ThemeContext } from \"context\";\nimport { ErrorFallback, Preview } from \"components\";\nimport { getReadableTime } from \"utils\";\n\nimport \"components/SplitPreviews/styles.css\";\n\nconst SplitPreviews = () => {\n    const { p1, p2 } = useParams();\n    const { handleChange, filenameChange } = useContext(MarkdownContext)!;\n    const { setPreview } = useContext(SecondPreviewContext)!;\n    const { markdown, wordCount, charCount, filename } =\n        useContext(SecondPreviewContext)!;\n    const { theme } = useContext(ThemeContext)!;\n\n    useEffect(() => {\n        const getEntry = (entryName: string) => {\n            return Object.entries(localStorage)\n                .filter(([key]) => {\n                    const entryKey = key.split(\" :~~: \")[0];\n                    const readableTime = getReadableTime(\n                        new Date(key.replace(\"Entry: \", \"\").split(\" :~~: \")[1])\n                    );\n                    const formattedKey = entryKey + \"@\" + readableTime;\n                    const matchedKey = formattedKey.startsWith(\n                        `Entry: ${entryName}`\n                    );\n\n                    return matchedKey;\n                })\n                .map(([key, value]: [key: string, value: string]) => ({\n                    filename: key.replace(\"Entry: \", \"\").split(\" :~~: \")[0],\n                    markdown: value,\n                }))[0];\n        };\n\n        if (!p1 || !p2) return console.log(\"not working\");\n\n        const firstPreview = getEntry(p1);\n        const secondPreview = getEntry(p2);\n        if(!firstPreview || !secondPreview) return;\n\n        filenameChange(p1);\n        handleChange(firstPreview.markdown);\n        setPreview({\n            filename: p2,\n            markdown: secondPreview.markdown,\n        });\n    }, [filenameChange, handleChange, p1, p2, setPreview]);\n\n    return (\n        <div className=\"previews\">\n            <div className={`preview-pane ${theme}`}>\n                <Preview />\n            </div>\n            <div className={`preview-pane ${theme}`}>\n                <ErrorBoundary FallbackComponent={ErrorFallback}>\n                    <div className={`preview-info ${theme}`}>\n                        <div className={`word-count ${theme}`}>\n                            {wordCount} words\n                        </div>\n                        <div className={`char-count ${theme}`}>\n                            {charCount} characters\n                        </div>\n                    </div>\n                    <h3>{filename}</h3>\n                    <div className={`preview-content ${theme}`}>\n                        <ReactMarkdown\n                            rehypePlugins={[rehypeRaw, rehypeStringify]}\n                            remarkPlugins={[\n                                remarkParse,\n                                remarkGfm,\n                                remarkRehype,\n                                emoji,\n                            ]}\n                        >\n                            {markdown}\n                        </ReactMarkdown>\n                    </div>\n                </ErrorBoundary>\n            </div>\n        </div>\n    );\n};\n\nexport default SplitPreviews;\n"],"names":["SplitPreviews","p1","p2","useParams","handleChange","filenameChange","useContext","MarkdownContext","setPreview","SecondPreviewContext","markdown","wordCount","charCount","filename","theme","ThemeContext","useEffect","getEntry","entryName","key","entryKey","readableTime","getReadableTime","value","firstPreview","secondPreview","jsxs","jsx","Preview","ErrorBoundary","ErrorFallback","ReactMarkdown","rehypeRaw","rehypeStringify","remarkParse","remarkGfm","remarkRehype","emoji"],"mappings":"2PAkBA,MAAMA,EAAgB,IAAM,CACxB,KAAM,CAAE,GAAAC,EAAI,GAAAC,CAAG,EAAIC,EAAU,EACvB,CAAE,aAAAC,EAAc,eAAAC,CAAe,EAAIC,aAAWC,CAAe,EAC7D,CAAE,WAAAC,CAAA,EAAeF,EAAA,WAAWG,CAAoB,EAChD,CAAE,SAAAC,EAAU,UAAAC,EAAW,UAAAC,EAAW,SAAAC,GACpCP,EAAAA,WAAWG,CAAoB,EAC7B,CAAE,MAAAK,CAAA,EAAUR,EAAA,WAAWS,CAAY,EAEzCC,OAAAA,EAAAA,UAAU,IAAM,CACN,MAAAC,EAAYC,GACP,OAAO,QAAQ,YAAY,EAC7B,OAAO,CAAC,CAACC,CAAG,IAAM,CACf,MAAMC,EAAWD,EAAI,MAAM,QAAQ,EAAE,CAAC,EAChCE,EAAeC,EACjB,IAAI,KAAKH,EAAI,QAAQ,UAAW,EAAE,EAAE,MAAM,QAAQ,EAAE,CAAC,CAAC,CAAA,EAOnD,OALcC,EAAW,IAAMC,GACN,WAC5B,UAAUH,CAAS,EAAA,CAI1B,CAAA,EACA,IAAI,CAAC,CAACC,EAAKI,CAAK,KAAqC,CAClD,SAAUJ,EAAI,QAAQ,UAAW,EAAE,EAAE,MAAM,QAAQ,EAAE,CAAC,EACtD,SAAUI,CAAA,EACZ,EAAE,CAAC,EAGT,GAAA,CAACtB,GAAM,CAACC,EAAW,OAAA,QAAQ,IAAI,aAAa,EAE1C,MAAAsB,EAAeP,EAAShB,CAAE,EAC1BwB,EAAgBR,EAASf,CAAE,EAC9B,CAACsB,GAAgB,CAACC,IAErBpB,EAAeJ,CAAE,EACjBG,EAAaoB,EAAa,QAAQ,EACvBhB,EAAA,CACP,SAAUN,EACV,SAAUuB,EAAc,QAAA,CAC3B,EAAA,EACF,CAACpB,EAAgBD,EAAcH,EAAIC,EAAIM,CAAU,CAAC,EAGjDkB,EAAA,KAAC,MAAI,CAAA,UAAU,WACX,SAAA,CAAAC,EAAAA,IAAC,OAAI,UAAW,gBAAgBb,CAAK,GACjC,SAAAa,EAAA,IAACC,IAAQ,CACb,CAAA,EACAD,EAAAA,IAAC,OAAI,UAAW,gBAAgBb,CAAK,GACjC,SAAAY,EAAA,KAACG,EAAc,CAAA,kBAAmBC,EAC9B,SAAA,CAAAJ,EAAA,KAAC,MAAI,CAAA,UAAW,gBAAgBZ,CAAK,GACjC,SAAA,CAAAY,EAAA,KAAC,MAAI,CAAA,UAAW,cAAcZ,CAAK,GAC9B,SAAA,CAAAH,EAAU,QAAA,EACf,EACCe,EAAA,KAAA,MAAA,CAAI,UAAW,cAAcZ,CAAK,GAC9B,SAAA,CAAAF,EAAU,aAAA,EACf,CAAA,EACJ,EACAe,EAAAA,IAAC,MAAI,SAASd,CAAA,CAAA,EACbc,MAAA,MAAA,CAAI,UAAW,mBAAmBb,CAAK,GACpC,SAAAa,EAAA,IAACI,EAAA,CACG,cAAe,CAACC,EAAWC,CAAe,EAC1C,cAAe,CACXC,EACAC,EACAC,EACAC,CACJ,EAEC,SAAA3B,CAAA,CAAA,EAET,CAAA,CAAA,CACJ,CACJ,CAAA,CACJ,CAAA,CAAA,CAER"}